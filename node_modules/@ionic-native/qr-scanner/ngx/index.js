var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var QRScanner = /** @class */ (function (_super) {
    __extends(QRScanner, _super);
    function QRScanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QRScanner.prototype.prepare = function () { return cordova(this, "prepare", { "callbackStyle": "node" }, arguments); };
    QRScanner.prototype.scan = function () { return cordova(this, "scan", { "callbackStyle": "node", "observable": true, "clearFunction": "cancelScan" }, arguments); };
    QRScanner.prototype.show = function () { return cordova(this, "show", {}, arguments); };
    QRScanner.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    QRScanner.prototype.enableLight = function () { return cordova(this, "enableLight", { "callbackStyle": "node" }, arguments); };
    QRScanner.prototype.destroy = function () { return cordova(this, "destroy", {}, arguments); };
    QRScanner.prototype.disableLight = function () { return cordova(this, "disableLight", { "callbackStyle": "node" }, arguments); };
    QRScanner.prototype.useFrontCamera = function () { return cordova(this, "useFrontCamera", { "callbackStyle": "node" }, arguments); };
    QRScanner.prototype.useBackCamera = function () { return cordova(this, "useBackCamera", { "callbackStyle": "node" }, arguments); };
    QRScanner.prototype.useCamera = function (camera) { return cordova(this, "useCamera", { "callbackStyle": "node" }, arguments); };
    QRScanner.prototype.pausePreview = function () { return cordova(this, "pausePreview", {}, arguments); };
    QRScanner.prototype.resumePreview = function () { return cordova(this, "resumePreview", {}, arguments); };
    QRScanner.prototype.getStatus = function () { return cordova(this, "getStatus", {}, arguments); };
    QRScanner.prototype.openSettings = function () { return cordova(this, "openSettings", { "sync": true }, arguments); };
    QRScanner.pluginName = "QRScanner";
    QRScanner.plugin = "cordova-plugin-qrscanner";
    QRScanner.pluginRef = "QRScanner";
    QRScanner.repo = "https://github.com/bitpay/cordova-plugin-qrscanner";
    QRScanner.platforms = ["Android", "Browser", "iOS", "Windows"];
    QRScanner = __decorate([
        Injectable()
    ], QRScanner);
    return QRScanner;
}(IonicNativePlugin));
export { QRScanner };
//# sourceMappingURL=data:application/json;base64,